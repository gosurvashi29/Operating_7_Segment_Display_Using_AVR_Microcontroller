
0to99_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000164  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ec  00000000  00000000  0000097d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000127  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d7  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ef  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000198  00000000  00000000  00000f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001123  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <num>:
        }
    }
}
int num(int s)
{
	switch (s)
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	91 05       	cpc	r25, r1
  70:	21 f1       	breq	.+72     	; 0xba <num+0x4e>
  72:	6c f4       	brge	.+26     	; 0x8e <num+0x22>
  74:	81 30       	cpi	r24, 0x01	; 1
  76:	91 05       	cpc	r25, r1
  78:	b1 f1       	breq	.+108    	; 0xe6 <num+0x7a>
  7a:	1c f4       	brge	.+6      	; 0x82 <num+0x16>
  7c:	89 2b       	or	r24, r25
  7e:	81 f1       	breq	.+96     	; 0xe0 <num+0x74>
  80:	2e c0       	rjmp	.+92     	; 0xde <num+0x72>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	91 05       	cpc	r25, r1
  86:	99 f0       	breq	.+38     	; 0xae <num+0x42>
  88:	03 97       	sbiw	r24, 0x03	; 3
  8a:	49 f5       	brne	.+82     	; 0xde <num+0x72>
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <num+0x48>
  8e:	87 30       	cpi	r24, 0x07	; 7
  90:	91 05       	cpc	r25, r1
  92:	e1 f0       	breq	.+56     	; 0xcc <num+0x60>
  94:	34 f4       	brge	.+12     	; 0xa2 <num+0x36>
  96:	85 30       	cpi	r24, 0x05	; 5
  98:	91 05       	cpc	r25, r1
  9a:	91 f0       	breq	.+36     	; 0xc0 <num+0x54>
  9c:	06 97       	sbiw	r24, 0x06	; 6
  9e:	f9 f4       	brne	.+62     	; 0xde <num+0x72>
  a0:	12 c0       	rjmp	.+36     	; 0xc6 <num+0x5a>
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	91 05       	cpc	r25, r1
  a6:	a9 f0       	breq	.+42     	; 0xd2 <num+0x66>
  a8:	09 97       	sbiw	r24, 0x09	; 9
  aa:	c9 f4       	brne	.+50     	; 0xde <num+0x72>
  ac:	15 c0       	rjmp	.+42     	; 0xd8 <num+0x6c>
	{
	case 0:return(0b1000000) ;
		case 1:return(~0b0000110);
	case 2:return(~0b1011011) ;
  ae:	24 ea       	ldi	r18, 0xA4	; 164
  b0:	3f ef       	ldi	r19, 0xFF	; 255
  b2:	1b c0       	rjmp	.+54     	; 0xea <num+0x7e>
	case 3:return(~0b1001111);
  b4:	20 eb       	ldi	r18, 0xB0	; 176
  b6:	3f ef       	ldi	r19, 0xFF	; 255
  b8:	18 c0       	rjmp	.+48     	; 0xea <num+0x7e>
	case 4 :return(~0b1100110);
  ba:	29 e9       	ldi	r18, 0x99	; 153
  bc:	3f ef       	ldi	r19, 0xFF	; 255
  be:	15 c0       	rjmp	.+42     	; 0xea <num+0x7e>
	case 5:return(~0b1101101);
  c0:	22 e9       	ldi	r18, 0x92	; 146
  c2:	3f ef       	ldi	r19, 0xFF	; 255
  c4:	12 c0       	rjmp	.+36     	; 0xea <num+0x7e>
	case 6:return(~0b1111101);
  c6:	22 e8       	ldi	r18, 0x82	; 130
  c8:	3f ef       	ldi	r19, 0xFF	; 255
  ca:	0f c0       	rjmp	.+30     	; 0xea <num+0x7e>
	case 7:return(~0b0000111);
  cc:	28 ef       	ldi	r18, 0xF8	; 248
  ce:	3f ef       	ldi	r19, 0xFF	; 255
  d0:	0c c0       	rjmp	.+24     	; 0xea <num+0x7e>
	case 8:return(~0b1111111);
  d2:	20 e8       	ldi	r18, 0x80	; 128
  d4:	3f ef       	ldi	r19, 0xFF	; 255
  d6:	09 c0       	rjmp	.+18     	; 0xea <num+0x7e>
	case 9:return(~0b1100111);
  d8:	28 e9       	ldi	r18, 0x98	; 152
  da:	3f ef       	ldi	r19, 0xFF	; 255
  dc:	06 c0       	rjmp	.+12     	; 0xea <num+0x7e>
  de:	08 95       	ret
}
int num(int s)
{
	switch (s)
	{
	case 0:return(0b1000000) ;
  e0:	20 e4       	ldi	r18, 0x40	; 64
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <num+0x7e>
		case 1:return(~0b0000110);
  e6:	29 ef       	ldi	r18, 0xF9	; 249
  e8:	3f ef       	ldi	r19, 0xFF	; 255
  ea:	82 2f       	mov	r24, r18
  ec:	93 2f       	mov	r25, r19
	case 6:return(~0b1111101);
	case 7:return(~0b0000111);
	case 8:return(~0b1111111);
	case 9:return(~0b1100111);
	}
  ee:	08 95       	ret

000000f0 <main>:
#include <avr/io.h>
int num(int s);
int main(void)
{
	int i,j,k;
	DDRD=255;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	81 bb       	out	0x11, r24	; 17
	DDRC=255;
  f4:	84 bb       	out	0x14, r24	; 20
    while(1)
    {
        for (i=0;i<=9;i++)
  f6:	e1 2c       	mov	r14, r1
  f8:	f1 2c       	mov	r15, r1
			for (j=0;j<=9;j++)
			{
				for (k=0;k<=50;k++)
				{
					PORTD=0b00000001;
					PORTC=num(i);
  fa:	c1 2c       	mov	r12, r1
  fc:	d1 2c       	mov	r13, r1
        {
			for (j=0;j<=9;j++)
			{
				for (k=0;k<=50;k++)
				{
					PORTD=0b00000001;
  fe:	99 24       	eor	r9, r9
 100:	93 94       	inc	r9
					PORTC=num(i);
					_delay_ms(10);
					PORTD=0b00000010;
 102:	68 94       	set
 104:	aa 24       	eor	r10, r10
 106:	a1 f8       	bld	r10, 1
 108:	25 c0       	rjmp	.+74     	; 0x154 <main+0x64>
        {
			for (j=0;j<=9;j++)
			{
				for (k=0;k<=50;k++)
				{
					PORTD=0b00000001;
 10a:	92 ba       	out	0x12, r9	; 18
					PORTC=num(i);
 10c:	b5 ba       	out	0x15, r11	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	83 ec       	ldi	r24, 0xC3	; 195
 110:	99 e0       	ldi	r25, 0x09	; 9
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x22>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x28>
 118:	00 00       	nop
					_delay_ms(10);
					PORTD=0b00000010;
 11a:	a2 ba       	out	0x12, r10	; 18
					PORTC=num(j);
 11c:	c8 01       	movw	r24, r16
 11e:	0e 94 36 00 	call	0x6c	; 0x6c <num>
 122:	85 bb       	out	0x15, r24	; 21
 124:	83 ec       	ldi	r24, 0xC3	; 195
 126:	99 e0       	ldi	r25, 0x09	; 9
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x38>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x3e>
 12e:	00 00       	nop
 130:	21 97       	sbiw	r28, 0x01	; 1
    {
        for (i=0;i<=9;i++)
        {
			for (j=0;j<=9;j++)
			{
				for (k=0;k<=50;k++)
 132:	59 f7       	brne	.-42     	; 0x10a <main+0x1a>
	DDRC=255;
    while(1)
    {
        for (i=0;i<=9;i++)
        {
			for (j=0;j<=9;j++)
 134:	0f 5f       	subi	r16, 0xFF	; 255
 136:	1f 4f       	sbci	r17, 0xFF	; 255
 138:	0a 30       	cpi	r16, 0x0A	; 10
 13a:	11 05       	cpc	r17, r1
 13c:	19 f0       	breq	.+6      	; 0x144 <main+0x54>
# define F_CPU 1000000
# include <util/delay.h>
#include <avr/io.h>
int num(int s);
int main(void)
{
 13e:	c3 e3       	ldi	r28, 0x33	; 51
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	e3 cf       	rjmp	.-58     	; 0x10a <main+0x1a>
	int i,j,k;
	DDRD=255;
	DDRC=255;
    while(1)
    {
        for (i=0;i<=9;i++)
 144:	9f ef       	ldi	r25, 0xFF	; 255
 146:	e9 1a       	sub	r14, r25
 148:	f9 0a       	sbc	r15, r25
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	e8 16       	cp	r14, r24
 14e:	f1 04       	cpc	r15, r1
 150:	0c f0       	brlt	.+2      	; 0x154 <main+0x64>
 152:	76 01       	movw	r14, r12
			for (j=0;j<=9;j++)
			{
				for (k=0;k<=50;k++)
				{
					PORTD=0b00000001;
					PORTC=num(i);
 154:	c7 01       	movw	r24, r14
 156:	0e 94 36 00 	call	0x6c	; 0x6c <num>
 15a:	b8 2e       	mov	r11, r24
 15c:	86 01       	movw	r16, r12
 15e:	ef cf       	rjmp	.-34     	; 0x13e <main+0x4e>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
